#!/usr/bin/env bash
# shellcheck disable=SC2059,SC2207

# Copyright (C) 2025 Antonin Portelli
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail
set +x

if [ -z ${MKPLOT_TMP_PREFIX+x} ]; then
  MKPLOT_TMP_PREFIX='mkplot_tmp_'
fi

tmp_list=()

# GENERAL FUNCTIONS ##########################################################
MKPLOT_BOLD='\033[1m'
MKPLOT_BLUE='\033[34m'
MKPLOT_RED='\033[31m'
MKPLOT_RESET='\033[0m'

mkplot_msg()  {
  local msg=$1
  if [ -t 1 ]; then printf "${MKPLOT_BOLD}${MKPLOT_BLUE}"; fi
  printf '==> '
  if [ -t 1 ]; then printf "${MKPLOT_RESET}${MKPLOT_BOLD}"; fi
  echo "${msg}"
  if [ -t 1 ]; then printf "${MKPLOT_RESET}"; fi
}

mkplot_err() {
  local msg=$1
  if [ -t 1 ]; then printf "${MKPLOT_BOLD}${MKPLOT_RED}" 1>&2; fi
  printf 'error: ' 1>&2
  if [ -t 1 ]; then printf "${MKPLOT_RESET}" 1>&2; fi
  echo "${msg}" 1>&2
}

mkplot_commands() {
  cmds=($(compgen -A function | grep _cmd_))
  echo "${cmds[@]//mkplot_cmd_/}"
}

mkplot_tmp()  {
  local ext=${1}
  local var=${2}
  local tmp
  tmp=$(mktemp "${MKPLOT_TMP_PREFIX}XXXXXX")
  mv "${tmp}" "${tmp}.${ext}"
  tmp_list+=("${tmp}")
  printf -v "${var}" -- "${tmp}.${ext}"
}

mkplot_clean() {
  mkplot_msg 'cleanup'
  local tmp
  for tmp in "${tmp_list[@]}"; do
    rm -f "${tmp}"*
  done
}

mkplot_pdflatex() {
  local src=$1
  if [ -z ${MKPLOT_PDFLATEX+x} ]; then
    MKPLOT_PDFLATEX='texfot --quiet pdflatex'
  fi
  mkplot_msg 'compile LaTeX document'
  ${MKPLOT_PDFLATEX} --interaction=nonstopmode --halt-on-error "${src}"
}

mkplot_pdfcrop() {
  local pdf=$1
  if [ -z ${MKPLOT_PDFCROP+x} ]; then
    MKPLOT_PDFCROP='pdfcrop'
  fi
  mkplot_msg 'crop PDF'
  ${MKPLOT_PDFCROP} --margin 1 "${pdf}" "${pdf}"
}

# SUBCOMMANDS ################################################################
# clean ......................................................................
mkplot_cmd_clean() {
  mkplot_msg 'cleaning all temporary files'
  rm -rf "${MKPLOT_TMP_PREFIX}"*
}

# gnuplot ....................................................................
mkplot_cmd_gnuplot()  {
  if (($# != 2)); then
    echo "usage: ${FUNCNAME[0]//_cmd_/ } <source> <output>" 1>&2
    echo 1>&2
    cat <<EOF  1>&2
Generate plot from gnuplot script using the cairolatex terminal. The script must not
have a 'set ouput' statement. If the file mkplot_preamble.tex is present, it is included 
in the preamble of the generated LaTeX code.
EOF
    exit 1
  fi

  local src="$1"
  local out="$2"
  local fig_tmp
  local doc_tmp
  local plt_tmp

  if [ -z ${MKPLOT_GNUPLOT+x} ]; then
    MKPLOT_GNUPLOT='gnuplot'
  fi

  mkplot_msg "generating '${out}' from '${src}' (gnuplot)"
  if ! grep -Eq 'set term(inal)? cairolatex' "${src}"; then
    mkplot_err "gnuplot script '${src}' does not use terminal cairolatex"
    exit 1
  fi
  if grep -q 'set output' "${src}"; then
    mkplot_err "gnuplot script '${src}' has a 'set ouput' line"
    exit 1
  fi
  mkplot_tmp tex fig_tmp
  mkplot_tmp tex doc_tmp
  pdf_tmp=${doc_tmp/%tex/pdf}
  mkplot_msg 'run gnuplot script'
  mkplot_tmp gp plt_tmp
  cat <<EOF  >"${plt_tmp}"
set output '${fig_tmp}'
EOF
  cat "${src}" >> "${plt_tmp}"
  ${MKPLOT_GNUPLOT} "${plt_tmp}"
  mkplot_msg 'generate LaTeX document'
  if [ -f mkplot_preamble.tex ]; then
    echo "found custom preamble 'mkplot_preamble.tex'"
  fi
  cat <<EOF >"${doc_tmp}"
\documentclass[12pt]{standalone}
\usepackage{graphicx,xcolor}
\InputIfFileExists{mkplot_preamble.tex}{}{}
\begin{document}
\input{${fig_tmp}}
\end{document}
EOF
  mkplot_pdflatex "${doc_tmp}"
  mv "${pdf_tmp}" "${out}"
  mkplot_clean
}

# TikZ .......................................................................
mkplot_cmd_tikz()  {
  if (($# != 2)); then
    echo "usage: ${FUNCNAME[0]//_cmd_/ } <source> <output>" 1>&2
    echo 1>&2
    cat <<EOF  1>&2
Generate plot from LaTeX TikZ source file. The content of the source file is inputted 
within '\begin{document}\end{document}'. If the file mkplot_preamble.tex is present, 
it is included in the preamble of the generated LaTeX code.
EOF
    exit 1
  fi

  local src="$1"
  local out="$2"

  mkplot_msg "generating '${out}' from '${src}' (tikz)"
  mkplot_tmp tex doc_tmp
  pdf_tmp=${doc_tmp/%tex/pdf}
  mkplot_msg 'generate LaTeX document'
  if [ -f mkplot_preamble.tex ]; then
    echo "found custom preamble 'mkplot_preamble.tex'"
  fi
  cat <<EOF  >"${doc_tmp}"
\documentclass[12pt]{standalone}
\usepackage{graphicx,xcolor,tikz,pgfplots}
\pgfplotsset{compat=newest}
\InputIfFileExists{mkplot_preamble.tex}{}{}
\begin{document}
\input{${src}}
\end{document}
EOF
  mkplot_pdflatex "${doc_tmp}"
  mv "${pdf_tmp}" "${out}"
  mkplot_msg "generated '${out}'"
  mkplot_clean
}

# MAIN #######################################################################
if (($# < 1)); then
    echo "usage: $(basename "$0") <command> <options>" 1>&2
    printf '\npossible commands:\n'
    mkplot_commands | tr ' ' '\n'
    exit 1
fi
type=$1

func_name="mkplot_cmd_${type}"
if declare -f "${func_name}" >/dev/null; then
  shift
  "${func_name}" "$@"
else
  mkplot_err "command '${type}' unknown"
  printf '\npossible commands:\n'
  mkplot_commands | tr ' ' '\n'
fi
